[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.0.1"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author}}"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
django = "^5.0.4"
python-dotenv = "^1.0.1"
djangorestframework = "^3.15.1"
sentry-sdk = "^2.6.0"
# psycopg2 = "^2.9.9"
psycopg2-binary = "^2.9.9"
django-split-settings = "^1.3.2"
drf-spectacular = "^0.27.2"
rest-framework-simplejwt = "^0.0.2"
django-axes = "^6.5.1"
django-storages = "^1.14.3"
djangorestframework-simplejwt = "^5.3.1"
dj-database-url = "^2.2.0"
boto3 = "^1.34.141"
django-cors-headers = "^4.4.0"
django-filter = "^24.2"
pillow = "^10.4.0"

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.1"
ruff = "^0.5.1"
black = "^24.4.2"
pytest = "8.1.1"
pytest-django = "4.8.0"
factory-boy = "^3.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.coverage.run]
omit = [
    "*/logs/*",
    "*/api/config/*",
    "**/__init__.py",
    "**/admin.py",
    ]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true


[tool.black]
line-length = 88

[tool.ruff]
lint.select = ["ALL"]
lint.unfixable = ["T201"]
lint.ignore = [
    "E501",   # Line too long  # Will be fixed by black
    "A003",
    "RUF001",
    "ERA001",
    "F841",   # Local variable is assigned to but never used
    "ANN101",
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `{name}`

    "D10",

    "D203",
    "D213",
    "EXE002",

    "PD011",
]
show-fixes = true
exclude = [
    "migrations",
    ".venv",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",  # Module imported but unused
]
"**/tests/**" = [
    "S101",  # Use of assert detected
    "INP001",
    "S106",
    "PGH003"
]
[tool.mypy]
python_version = "3.12"
# ignore_missing_imports_per_module = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
strict = false
implicit_reexport = true
exclude = [
    "venv",
    "migrations",
]

[tool.pytest.ini_options]
minversion = "7.0"
DJANGO_SETTINGS_MODULE = "api.config.settings"
addopts = "--exitfirst -vv --cov --cov-report=html --cov-fail-under=80"
testpaths = [
    "**/tests",  # Ensure this is the correct path to your test directory
]
